"""
Django settings for projeto1 project.

Generated by 'django-admin startproject' using Django 2.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""
#A biblioteca gunicorn é um servidor web para modo produção
#Necessário usar a biblioteca django heroku para produção
import os
import django_heroku

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
#BASEDIR é o diretorio base do arquivo settings
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'qd90k0w-g%f&2whl@5r^axw^cnij6y)*_nydoeoackw^-j9%7e'

# SECURITY WARNING: don't run with debug turned on in production!
#Quando finalizar, muda pra False
DEBUG = False

#DOMINIO DA APLICAÇÃO
ALLOWED_HOSTS = ['projeto1-gf.herokuapp.com'] #Aqui leva o nome do dominio onde a aplicação estará hospedada

# Asterisco significa qualquer coisa
# ALLOWED_HOSTS = ['#']


# Application definition
#APPS instaladas
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'core',
]
#MIDDLEWAREs são serviços de varios aspectos que rodam entre o browser e o servidor
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    #PARA MODO PRODUÇÃO É NECESSÁRIO
    'whitenoise.middleware.WhiteNoiseMiddleware',
]
#CONFIGURAÇÃO DE ROTAS DE URL PADRÃO
ROOT_URLCONF = 'projeto1.urls'

#CAMADA FRONT-END, CONTÉM APLICAÇÕES QUE GERENCIAM OS TEMPLATES NO BACKEND
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        #Referenciando o diretorio de templates, cada app deve ter um diretorio templates
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

#PADRÃO DE APLICAÇÕES WEB PYTHON QUE O DJANGO SEGUE
WSGI_APPLICATION = 'projeto1.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

#SQLite3 Banco padrão
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators
#VALIDADORES DE SENHA 
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'UTC'

#Multiplos idiomas
USE_I18N = True

USE_L10N = True
#TimeZone 
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/
#Cada aplicação deve ter um diretorio STATIC
STATIC_URL = '/static/' #usando durante desenvolvimento DEBUG=TRUE
#Raiz dos arquivos staticos
#QUANDO FOR PRA PRODUÇÃO, O DIRETORIO STATICFILES IRÁ CENTRALIZAR OS ARQUIVOS STATICOS DE CADA APP
#ELE IRÁ SER CRIADO JUNTANDO O DIRETORIO BASE COMO PONTO DE PARTIDA
#POR PADRÃO, O SERVIDOR DJANGO NÃO MOSTRA ARQUIVOS STATICOS EM MODO PRODUÇÃO
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles') #Usando durante produção DEBUG=FALSE
#Utilizamos a biblioteca Whitenoise para carregar arquivos staticos em modo produção

#Setando a url de logout
LOGOUT_REDIRECT_URL = 'index'

#Configurações para produção do Heroku
django_heroku.settings(locals())